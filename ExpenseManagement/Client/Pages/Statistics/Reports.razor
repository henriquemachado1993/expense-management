@page "/statistics/reports"
@using ExpenseManagement.Shared.Helpers
@using ExpenseManagement.Shared.ValueObjects
@using ExpenseManagement.Shared.Entities
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
@inject HttpClient Http

<h3>Gráficos estatisticos (@DateTime.Now.Year)</h3>
<hr />

<AlertCustom Alerts=@Alerts></AlertCustom>

<div class="container">
    <h5>Despesas por mês</h5>
    <!--Despesas por mes -->
    <div Class="rz-p-0 rz-p-md-12">
        <RadzenChart>
            <RadzenValueAxis>
                <RadzenAxisTitle Text="Valor" />
            </RadzenValueAxis>
            <RadzenCategoryAxis>
                <RadzenAxisTitle Text="Mês" />
            </RadzenCategoryAxis>
            <RadzenColumnSeries Data="@ExpensesByMonth.ToArray()" CategoryProperty="Key" ValueProperty="Value" Title="Mês" />
        </RadzenChart>
    </div>

    <h5>Despesas por categoria</h5>
    <!--Despesas por categoria -->
    <div Class="rz-p-0 rz-p-md-12">
        <RadzenChart>
            <RadzenValueAxis>
                <RadzenAxisTitle Text="Valor" />
            </RadzenValueAxis>
            <RadzenCategoryAxis>
                <RadzenAxisTitle Text="Categoria" />
            </RadzenCategoryAxis>
            <RadzenPieSeries Data="@ExpensesByCategory.ToArray()" CategoryProperty="Key" ValueProperty="Value" Title="Categoria" />
        </RadzenChart>
    </div>

</div>

@code {
    public List<MessageResult> Alerts = new();

    private List<DataItem<decimal>> ExpensesByMonth = new();
    private List<DataItem<decimal>> ExpensesByCategory = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadChats();
    }

    private async Task LoadChats()
    {
        try
        {
            var ResponseExpenses = await Http.GetFromJsonAsync<BusinessResult<List<Expense>>>("Expense");
            if (ResponseExpenses != null && !ResponseExpenses.IsValid)
            {
                foreach (var message in ResponseExpenses.Messages)
                    AlertHelper.AddError(Alerts, message.Message);
                return;
            }

            if (ResponseExpenses != null && ResponseExpenses.Data != null && ResponseExpenses.Data.Any())
            {
                var expensesByYear = ResponseExpenses.Data.Where(x => x.ExpenseDate.Year == DateTime.Now.Year);
                var groupedExpensesByMonth = expensesByYear.GroupBy(x => x.ExpenseDate.ToString("MMM"));
                var groupedExpensesByCategory = expensesByYear.GroupBy(x => x.Category.Description);

                foreach (var group in groupedExpensesByMonth)
                    ExpensesByMonth.Add(new DataItem<decimal>() { Key = group.Key, Value = group.Sum(x => x.Amount) });

                foreach (var group in groupedExpensesByCategory)
                    ExpensesByCategory.Add(new DataItem<decimal>() { Key = group.Key, Value = group.Sum(x => x.Amount) });
            }
        }
        catch (Exception ex)
        {
            AlertHelper.AddError(Alerts, ex.Message);
        }
    }
}
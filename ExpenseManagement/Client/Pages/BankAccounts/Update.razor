@page "/bank-accounts/update/{Id:int}"
@using ExpenseManagement.Shared.Entities
@using ExpenseManagement.Shared.Enums
@using ExpenseManagement.Shared.Enuns
@using ExpenseManagement.Shared.Extensions
@using ExpenseManagement.Shared.Helpers
@using ExpenseManagement.Shared.ValueObjects
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using ExpenseManagement.Shared
@using System.Net

@attribute [Authorize]
@inject HttpClient Http

<PageTitle>Alterar conta</PageTitle>

@if (Account == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <EditForm Model="@Account" OnValidSubmit="@HandleValidSubmit">
        <h3>Alterar Categoria</h3>
        <hr />

        <DataAnnotationsValidator />

        @if (Alerts.Any())
        {
            @foreach (var alert in Alerts)
            {
                <div class="alert alert-@alert.TypeCustom alert-dismissible fade show" role="alert">
                    @alert.Message
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
        }

        <div class="form-group">
            <label for="title" class="form-label">
                Título
            </label>
            <InputText id="title" class="form-control" placeholder="Título"
                   @bind-Value="Account.Title" />
            <ValidationMessage For="() => Account.Title" />
        </div>
        <div class="form-group">
            <label for="title" class="form-label">
                Tipo de conta
            </label>
            <InputSelect class="form-control" @bind-Value="@Account.Type">
                <option value="0" disabled selected>Selecione o tipo</option>
                @foreach (var type in Enum.GetNames(typeof(TypeBankAccount)))
                {
                <option value="@((int)EnumExtension.GetEnumValue<TypeBankAccount>(type))">
                    @(EnumExtension.GetEnumValue<TypeBankAccount>(type).GetDisplayName())
                </option>
                }
        </InputSelect>

        <ValidationMessage For="() => Account.Type" />
    </div>
    <div class="form-group">
        <label for="description" class="form-label">
            Valor
        </label>
        <InputNumber id="description" class="form-control" placeholder="Valor total na conta"
                     @bind-Value="Account.AccountValue" />
        <ValidationMessage For="() => Account.AccountValue" />
    </div>
    <br />

    <button type="submit" class="btn btn-primary">Salvar</button>
    <NavLink class="btn btn-primary" href="@($"bank-accounts")">Listagem</NavLink>

</EditForm>
}


@code {
    [Parameter]
    public int Id { get; set; }

    private BankAccounts Account = new();
    public List<MessageResult> Alerts = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Id <= 0)
                return;

            var reponse = await Http.GetFromJsonAsync<BusinessResult<BankAccounts>>($"BankAccounts/{Id}");
            if (reponse != null && !reponse.IsValid)
            {
                foreach (var message in reponse.Messages)
                    AlertHelper.AddError(Alerts, message.Message);

                return;
            }

            if (reponse != null)
                Account = reponse.Data;

        }
        catch (Exception ex)
        {
            AlertHelper.AddError(Alerts, ex.Message);
        }
    }

    private async Task HandleValidSubmit(EditContext editContext)
    {
        try
        {
            var httpResponse = await Http.PostAsJsonAsync<BankAccounts>("BankAccounts", (BankAccounts)editContext.Model);

            if (!httpResponse.IsSuccessStatusCode)
            {
                throw new HttpRequestException(
                    $"Houve um problema. Status Code: {httpResponse.StatusCode}");
            }
            else
            {
                var response = await httpResponse.Content.ReadFromJsonAsync<BusinessResult<BankAccounts>>();
                if (response != null && !response.IsValid)
                {
                    foreach (var message in response.Messages)
                        Alerts.Add(new MessageResult() { Message = message.Message, TypeCustom = "danger" });
                }
                else
                {
                    Alerts.Add(new MessageResult() { Message = "Alterado com sucesso.", TypeCustom = "success" });
                }
            }
        }
        catch (Exception ex)
        {
            Alerts.Add(new MessageResult() { Message = ex.Message, TypeCustom = "danger" });
        }
    }
}
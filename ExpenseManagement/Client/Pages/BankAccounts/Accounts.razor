@page "/bank-accounts"
@using ExpenseManagement.Shared.Entities
@using ExpenseManagement.Shared.Enuns
@using ExpenseManagement.Shared.Extensions
@using ExpenseManagement.Shared.Helpers
@using ExpenseManagement.Shared.ValueObjects
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using ExpenseManagement.Shared
@attribute [Authorize]
@inject HttpClient Http

<PageTitle>Minhas contas</PageTitle>

<h1>Minhas contas</h1>

@if (Alerts.Any())
{
    @foreach (var alert in Alerts)
    {
        <div class="alert alert-@alert.TypeCustom alert-dismissible fade show" role="alert">
            @alert.Message
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
}

@if (bankAccounts == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <NavLink class="btn btn-primary" href="bank-accounts/add">Novo</NavLink>
    <br />

    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Título</th>
                <th>Tipo</th>
                <th>Total R$</th>
                <th>Atualizado em</th>
                <th>Ação</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in bankAccounts.Data)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Title</td>
                    <td>@(((TypeBankAccount)item.Type).GetDisplayName())</td>
                    <td>@CurrencyHelper.FormatCurrency(item.AccountValue, "BRL")</td>
                    <td>@(item.LastModifiedAt == null ? item.CreatedAt.ToString("dd/MM/yyyy HH:mm:ss") : item.LastModifiedAt?.ToString("dd/MM/yyyy HH:mm:ss"))</td>
                    <td>
                        <NavLink class="btn btn-primary" href="@($"bank-accounts/update/{item.Id}")">Alterar</NavLink>
                        <button class="btn btn-primary" @onclick="() => OpenDialogDelete(item.Id)">Excluir</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (DialogIsOpen)
{
    <DialogCustom Title="Deletar conta"
        Message="Tem certeza que deseja excluir este registro?"
        OnClose="@OnDialogClose"
        Type="DialogCustom.Category.Delete">
    </DialogCustom>
}

@code {

    private int IdAccount;
    private bool DialogIsOpen = false;

    private BusinessResult<List<BankAccounts>>? bankAccounts;
    public List<MessageResult> Alerts = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            bankAccounts = await Http.GetFromJsonAsync<BusinessResult<List<BankAccounts>>>("BankAccounts");
            if (bankAccounts != null && !bankAccounts.IsValid)
            {
                foreach (var message in bankAccounts.Messages)
                    AlertHelper.AddError(Alerts, message.Message);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            AlertHelper.AddError(Alerts, ex.Message);
        }
    }

    private async Task Delete(int id)
    {
        try
        {
            var httpResponse = await Http.DeleteAsync($"BankAccounts/{id}");

            if (!httpResponse.IsSuccessStatusCode)
            {
                throw new HttpRequestException(
                    $"Houve um problema. Status Code: {httpResponse.StatusCode}");
            }
            else
            {
                var response = await httpResponse.Content.ReadFromJsonAsync<BusinessResult<bool>>();
                if (response != null && !response.IsValid)
                {
                    foreach (var message in response.Messages)
                        AlertHelper.AddError(Alerts, message.Message);
                }
                else
                {
                    // remove o item da lista
                    bankAccounts.Data = bankAccounts.Data.Where(x => x.Id != id).ToList();
                    AlertHelper.AddSuccess(Alerts, "Registro deletado com sucesso.");
                }
            }
        }
        catch (Exception ex)
        {
            AlertHelper.AddError(Alerts, ex.Message);
        }
    }

    private void OpenDialogDelete(int id)
    {
        DialogIsOpen = true;
        IdAccount = id;
    }

    private async Task OnDialogClose(bool isOk)
    {
        if (isOk && IdAccount > 0)
        {
            await Delete(IdAccount);
        }
        DialogIsOpen = false;
    }
}

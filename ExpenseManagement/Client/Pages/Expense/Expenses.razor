@page "/expenses"
@using ExpenseManagement.Shared.Entities
@using ExpenseManagement.Shared.Enuns
@using ExpenseManagement.Shared.Extensions
@using ExpenseManagement.Shared.Helpers
@using ExpenseManagement.Shared.ValueObjects
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using ExpenseManagement.Shared
@using System.Text;
@attribute [Authorize]
@inject HttpClient Http

<PageTitle>Minhas Despesas</PageTitle>

<h1>Minhas Despesas</h1>

@if (Alerts.Any())
{
    @foreach (var alert in Alerts)
    {
        <div class="alert alert-@alert.TypeCustom alert-dismissible fade show" role="alert">
            @alert.Message
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
}

@if (ResponseExpenses == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <NavLink class="btn btn-primary" href="expenses/add">Novo</NavLink>
    <br />

    <table class="table">
        <thead>
            <tr>
                <th>Descrição</th>
                <th>Valor R$</th>
                <th>Pago</th>
                <th>Data</th>
                <th>Categoria</th>
                <th>Ação</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ResponseExpenses.Data)
            {
                <tr>
                    <td>@item.Description</td>
                    <td>@CurrencyHelper.FormatCurrency(item.Amount, "BRL")</td>
                    <td>
                        @if (item.IsPaid == 1)
                        {
                            <span class="badge bg-success">Sim</span>
                        }
                        else
                        {
                            <span class="badge bg-danger">Não</span>
                        }
                    </td>
                    <td>@item.ExpenseDate.ToString("dd/MM/yyyy HH:mm:ss")</td>
                    <td>@item.Category.Title</td>
                    <td>
                        @if (item.IsPaid != 1)
                        {
                            <button class="btn btn-success" @onclick="() => OpenDialog(item.Id, Dialog.Category.Okay)" title="Confirmar pagamento">Pago</button>
                        }
                        <NavLink class="btn btn-primary" href="@($"expenses/update/{item.Id}")">Alterar</NavLink>
                        <button class="btn btn-danger" @onclick="() => OpenDialog(item.Id, Dialog.Category.Delete)">Excluir</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (DialogIsOpen && DialogCategory == Dialog.Category.Okay)
{
    <Dialog Title="Confirmar"
        Message="Tem certeza que deseja confirmar o pagamento?"
        OnClose="OnDialogCloseConfirmPayment"
        Type="DialogCategory">
    </Dialog>
}

@if (DialogIsOpen && DialogCategory == Dialog.Category.Delete)
{
    <Dialog Title="Confirmar"
        Message="Tem certeza que deseja excluir este registro?"
        OnClose="OnDialogCloseDelete"
        Type="DialogCategory">
    </Dialog>
}

@code {
    @inject NavigationManager NavigationManager;

    private int IdExpense;
    private bool DialogIsOpen = false;
    private Dialog.Category DialogCategory;

    private BusinessResult<List<Expense>>? ResponseExpenses;
    public List<MessageResult> Alerts = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ResponseExpenses = await Http.GetFromJsonAsync<BusinessResult<List<Expense>>>("Expense");
            if (ResponseExpenses != null && !ResponseExpenses.IsValid)
            {
                foreach (var message in ResponseExpenses.Messages)
                    AlertHelper.AddError(Alerts, message.Message);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            AlertHelper.AddError(Alerts, ex.Message);
        }
    }

    private async Task Delete(int id)
    {
        try
        {
            var httpResponse = await Http.DeleteAsync($"Expense/{id}");

            if (!httpResponse.IsSuccessStatusCode)
            {
                throw new HttpRequestException(
                    $"Houve um problema. Status Code: {httpResponse.StatusCode}");
            }
            else
            {
                var response = await httpResponse.Content.ReadFromJsonAsync<BusinessResult<bool>>();
                if (response != null && !response.IsValid)
                {
                    foreach (var message in response.Messages)
                        AlertHelper.AddError(Alerts, message.Message);
                }
                else
                {
                    // remove o item da lista
                    ResponseExpenses.Data = ResponseExpenses.Data.Where(x => x.Id != id).ToList();
                    AlertHelper.AddSuccess(Alerts, "Registro deletado com sucesso.");
                }
            }
        }
        catch (Exception ex)
        {
            AlertHelper.AddError(Alerts, ex.Message);
        }
    }

    private async Task ConfirmPayment(int id)
    {
        try
        {
            var jsonString = "{\"id\":" + id + "}";
            var httpContent = new StringContent(jsonString, Encoding.UTF8, "application/json");
            var httpResponse = await Http.PutAsync($"Expense/confirmpayment", httpContent);

            if (!httpResponse.IsSuccessStatusCode)
            {
                throw new HttpRequestException(
                    $"Houve um problema. Status Code: {httpResponse.StatusCode}");
            }
            else
            {
                var response = await httpResponse.Content.ReadFromJsonAsync<BusinessResult<Expense>>();
                if (response != null && !response.IsValid)
                {
                    foreach (var message in response.Messages)
                        AlertHelper.AddError(Alerts, message.Message);
                }
                else
                {
                    AlertHelper.AddSuccess(Alerts, "Pagamento confirmado.");

                    NavigationManager.NavigateTo("expenses", true);
                }
            }
        }
        catch (Exception ex)
        {
            AlertHelper.AddError(Alerts, ex.Message);
        }
    }

    private void OpenDialog(int id, Dialog.Category type)
    {
        DialogCategory = type;
        DialogIsOpen = true;
        IdExpense = id;
    }

    private async Task OnDialogCloseDelete(bool isOk)
    {
        if (isOk && IdExpense > 0)
        {
            await Delete(IdExpense);
        }
        DialogIsOpen = false;
    }

    private async Task OnDialogCloseConfirmPayment(bool isOk)
    {
        if (isOk && IdExpense > 0)
        {
            await ConfirmPayment(IdExpense);
        }
        DialogIsOpen = false;
    }
}
